/**
 * Generated by orval v6.2.4 üç∫
 * Do not edit manually.
 * Covid Test Management
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction
} from '@sveltestack/svelte-query';
import type {
  ValidationProblemDetails,
  ProblemDetails,
  GetApiV1CenterParams,
  LoginOrCreateNewUserResponse,
  PostApiV1LoginParams
} from '../model';
import { customInstance } from '../mutator/custom-instance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const getApiV1Center = (params?: GetApiV1CenterParams) => {
  return customInstance<void>({ url: `/api/v1/Center`, method: 'get', params });
};

export const getGetApiV1CenterQueryKey = (params?: GetApiV1CenterParams) => [
  `/api/v1/Center`,
  ...(params ? [params] : [])
];

export const useGetApiV1Center = <
  TData = AsyncReturnType<typeof getApiV1Center>,
  TError = ValidationProblemDetails | ProblemDetails
>(
  params?: GetApiV1CenterParams,
  options?: { query?: UseQueryOptions<AsyncReturnType<typeof getApiV1Center>, TError, TData> }
) => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1CenterQueryKey(params);
  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1Center>> = () =>
    getApiV1Center(params);

  const query = useQuery<AsyncReturnType<typeof getApiV1Center>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const getApiV1Hello = () => {
  return customInstance<void>({ url: `/api/v1/Hello`, method: 'get' });
};

export const getGetApiV1HelloQueryKey = () => [`/api/v1/Hello`];

export const useGetApiV1Hello = <
  TData = AsyncReturnType<typeof getApiV1Hello>,
  TError = ValidationProblemDetails | ProblemDetails
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof getApiV1Hello>, TError, TData>;
}) => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1HelloQueryKey();
  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1Hello>> = () => getApiV1Hello();

  const query = useQuery<AsyncReturnType<typeof getApiV1Hello>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const postApiV1Login = (params?: PostApiV1LoginParams) => {
  return customInstance<LoginOrCreateNewUserResponse>({
    url: `/api/v1/Login`,
    method: 'post',
    data: undefined,
    params
  });
};

export const usePostApiV1Login = <
  TError = ValidationProblemDetails | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof postApiV1Login>,
    TError,
    { params?: PostApiV1LoginParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof postApiV1Login>,
    { params?: PostApiV1LoginParams }
  > = (props) => {
    const { params } = props || {};

    return postApiV1Login(params);
  };

  return useMutation<
    AsyncReturnType<typeof postApiV1Login>,
    TError,
    { params?: PostApiV1LoginParams },
    TContext
  >(mutationFn, mutationOptions);
};
